
Project Architecture and Codebase Overview

This document provides a comprehensive overview of the project's architecture and codebase. It includes a description of the project structure, key components, and the purpose of each file. This information is intended to give a full-stack developer a clear understanding of the project.

Project Description
The project is a web application built using React, TypeScript, and Tailwind CSS. It is designed to provide users with a tool to estimate interior design costs based on various project types, categories, and layout details. The application is structured to be modular and maintainable, with a focus on clean code and best practices.

Project Structure
The project is organized into the following directories:

    ├── .bolt/
    │   ├── config.json: Configuration file for the Bolt environment.
    │   └── prompt: Prompt file for the Bolt environment.
    ├── node_modules/: Contains all the installed npm packages.
    ├── public/: Contains static assets like images.
    │   └── choicedge-logo.png: Logo image for the application.
    ├── src/
    │   ├── components/: Reusable React components.
    │   │   └── Layout.tsx: Layout component for consistent page structure.
    │   ├── pages/: React components for each page.
    │   │   ├── CategorySelectionPage.tsx: Page for selecting project category.
    │   │   ├── ComingSoonPage.tsx: Placeholder page for future features.
    │   │   ├── EstimateSummaryPage.tsx: Page to display the final estimate.
    │   │   ├── HomePage.tsx: Landing page for project type selection.
    │   │   └── ProjectDetailsPage.tsx: Page for selecting project details.
    │   │   └── ResidentialLayoutPage.tsx: Page for defining residential layout.
    │   ├── App.tsx: Main application component with routing.
    │   ├── index.css: Global CSS styles including Tailwind directives.
    │   ├── main.tsx: Entry point for the React application.
    │   └── vite-env.d.ts: TypeScript declaration file for Vite environment.
    ├── eslint.config.js: ESLint configuration file.
    ├── index.html: Main HTML file for the application.
    ├── package-lock.json: npm lock file for dependency management.
    ├── package.json: npm configuration file with project dependencies.
    ├── postcss.config.js: PostCSS configuration file.
    ├── tailwind.config.js: Tailwind CSS configuration file.
    ├── tsconfig.app.json: TypeScript configuration for the application.
    ├── tsconfig.json: Main TypeScript configuration file.
    ├── tsconfig.node.json: TypeScript configuration for Node.js.
    └── vite.config.ts: Vite configuration file.

File Descriptions

    .bolt/config.json
        Configuration file for the Bolt environment.

    .bolt/prompt
        Prompt file for the Bolt environment.

    public/choicedge-logo.png
        Logo image for the application.

    src/components/Layout.tsx
        Layout component that provides a consistent structure for all pages, including header and footer.

    src/pages/CategorySelectionPage.tsx
        Page where users select a category (Standard, Premium, Luxury) for their project.

    src/pages/ComingSoonPage.tsx
        Placeholder page for features that are not yet implemented.

    src/pages/EstimateSummaryPage.tsx
        Page that displays the final estimate based on user inputs, including detailed breakdowns and notes.

    src/pages/HomePage.tsx
        Landing page where users select the project type (Residential, Commercial, Hospitality, Industrial).

    src/pages/ProjectDetailsPage.tsx
        Page where users select specific project details, such as layout type or custom room configurations.

    src/pages/ResidentialLayoutPage.tsx
        Page where users define the layout for residential projects, including carpet area and room details.

    src/App.tsx
        Main application component that sets up routing using React Router.

    src/index.css
        Global CSS file that includes Tailwind CSS directives and custom styles.

    src/main.tsx
        Entry point for the React application, rendering the App component.

    src/vite-env.d.ts
        TypeScript declaration file for Vite environment variables.

    eslint.config.js
        ESLint configuration file for linting JavaScript and TypeScript code.

    index.html
        Main HTML file that serves as the entry point for the application.

    package-lock.json
        npm lock file that ensures consistent dependency versions.

    package.json
        npm configuration file that lists project dependencies and scripts.

    postcss.config.js
        PostCSS configuration file for processing CSS with Tailwind and Autoprefixer.

    tailwind.config.js
        Tailwind CSS configuration file for customizing styles.

    tsconfig.app.json
        TypeScript configuration file for the application code.

    tsconfig.json
        Main TypeScript configuration file that includes references to other tsconfig files.

    tsconfig.node.json
        TypeScript configuration file for Node.js code.

    vite.config.ts
        Vite configuration file for setting up the development server and build process.

Code Files

    .gitignore
        ```
        # Logs
        logs
        *.log
        npm-debug.log*
        yarn-debug.log*
        yarn-error.log*
        pnpm-debug.log*
        lerna-debug.log*

        node_modules
        dist
        dist-ssr
        *.local

        # Editor directories and files
        .vscode/*
        !.vscode/extensions.json
        .idea
        .DS_Store
        *.suo
        *.ntvs*
        *.njsproj
        *.sln
        *.sw?
        ```

    eslint.config.js
        ```javascript
        import js from '@eslint/js';
        import globals from 'globals';
        import reactHooks from 'eslint-plugin-react-hooks';
        import reactRefresh from 'eslint-plugin-react-refresh';
        import tseslint from 'typescript-eslint';

        export default tseslint.config(
          { ignores: ['dist'] },
          {
            extends: [js.configs.recommended, ...tseslint.configs.recommended],
            files: ['**/*.{ts,tsx}'],
            languageOptions: {
              ecmaVersion: 2020,
              globals: globals.browser,
            },
            plugins: {
              'react-hooks': reactHooks,
              'react-refresh': reactRefresh,
            },
            rules: {
              ...reactHooks.configs.recommended.rules,
              'react-refresh/only-export-components': [
                'warn',
                { allowConstantExport: true },
              ],
            },
          }
        );
        ```

    index.html
        ```html
        <!doctype html>
        <html lang="en">
          <head>
            <meta charset="UTF-8" />
            <link rel="icon" type="image/svg+xml" href="/vite.svg" />
            <meta name="viewport" content="width=device-width, initial-scale=1.0" />
            <title>Vite + React + TS</title>
          </head>
          <body>
            <div id="root"></div>
            <script type="module" src="/src/main.tsx"></script>
          </body>
        </html>
        ```

    package.json
        ```json
        {
          "name": "vite-react-typescript-starter",
          "private": true,
          "version": "0.0.0",
          "type": "module",
          "scripts": {
            "dev": "vite",
            "build": "vite build",
            "lint": "eslint .",
            "preview": "vite preview"
          },
          "dependencies": {
            "jspdf": "^2.5.1",
            "jspdf-autotable": "^3.8.2",
            "lucide-react": "^0.344.0",
            "react": "^18.3.1",
            "react-dom": "^18.3.1",
            "react-router-dom": "^6.22.3"
          },
          "devDependencies": {
            "@eslint/js": "^9.9.1",
            "@types/react": "^18.3.5",
            "@types/react-dom": "^18.3.0",
            "@vitejs/plugin-react": "^4.3.1",
            "autoprefixer": "^10.4.18",
            "eslint": "^9.9.1",
            "eslint-plugin-react-hooks": "^5.1.0-rc.0",
            "eslint-plugin-react-refresh": "^0.4.11",
            "globals": "^15.9.0",
            "postcss": "^8.4.35",
            "tailwindcss": "^3.4.1",
            "typescript": "^5.5.3",
            "typescript-eslint": "^8.3.0",
            "vite": "^5.4.2"
          }
        }
        ```

    postcss.config.js
        ```javascript
        export default {
          plugins: {
            tailwindcss: {},
            autoprefixer: {},
          },
        };
        ```

    tailwind.config.js
        ```javascript
        /** @type {import('tailwindcss').Config} */
        export default {
          content: ['./index.html', './src/**/*.{js,ts,jsx,tsx}'],
          theme: {
            extend: {},
          },
          plugins: [],
        };
        ```

    tsconfig.app.json
        ```json
        {
          "compilerOptions": {
            "target": "ES2020",
            "useDefineForClassFields": true,
            "lib": ["ES2020", "DOM", "DOM.Iterable"],
            "module": "ESNext",
            "skipLibCheck": true,

            /* Bundler mode */
            "moduleResolution": "bundler",
            "allowImportingTsExtensions": true,
            "isolatedModules": true,
            "moduleDetection": "force",
            "noEmit": true,
            "jsx": "react-jsx",

            /* Linting */
            "strict": true,
            "noUnusedLocals": true,
            "noUnusedParameters": true,
            "noFallthroughCasesInSwitch": true
          },
          "include": ["src"]
        }
        ```

    tsconfig.json
        ```json
        {
          "files": [],
          "references": [
            { "path": "./tsconfig.app.json" },
            { "path": "./tsconfig.node.json" }
          ]
        }
        ```

    tsconfig.node.json
        ```json
        {
          "compilerOptions": {
            "target": "ES2022",
            "lib": ["ES2023"],
            "module": "ESNext",
            "skipLibCheck": true,

            /* Bundler mode */
            "moduleResolution": "bundler",
            "allowImportingTsExtensions": true,
            "isolatedModules": true,
            "moduleDetection": "force",
            "noEmit": true,

            /* Linting */
            "strict": true,
            "noUnusedLocals": true,
            "noUnusedParameters": true,
            "noFallthroughCasesInSwitch": true
          },
          "include": ["vite.config.ts"]
        }
        ```

    vite.config.ts
        ```typescript
        import { defineConfig } from 'vite';
        import react from '@vitejs/plugin-react';

        // https://vitejs.dev/config/
        export default defineConfig({
          plugins: [react()],
          optimizeDeps: {
            exclude: ['lucide-react'],
          },
        });
        ```

    src/App.tsx
        ```typescript
        import React from 'react';
        import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
        import HomePage from './pages/HomePage';
        import CategorySelectionPage from './pages/CategorySelectionPage';
        import ProjectDetailsPage from './pages/ProjectDetailsPage';
        import ResidentialLayoutPage from './pages/ResidentialLayoutPage';
        import EstimateSummaryPage from './pages/EstimateSummaryPage';
        import ComingSoonPage from './pages/ComingSoonPage';

        function App() {
          return (
            <Router>
              <Routes>
                <Route path="/" element={<HomePage />} />
                <Route path="/category-selection" element={<CategorySelectionPage />} />
                <Route path="/project-details" element={<ProjectDetailsPage />} />
                <Route path="/residential-layout" element={<ResidentialLayoutPage />} />
                <Route path="/estimate-summary" element={<EstimateSummaryPage />} />
                <Route path="/coming-soon" element={<ComingSoonPage />} />
              </Routes>
            </Router>
          );
        }

        export default App;
        ```

    src/index.css
        ```css
        @tailwind base;
            @tailwind components;
            @tailwind utilities;

            input {
              width: 100%;
              padding: 12px;
              font-size: 16px;
              border: 2px solid #ddd;
              border-radius: 8px;
              transition: all 0.3s ease-in-out;
              outline: none;
            }

            input:focus {
              border-color: #4b3621;
              box-shadow: 0px 0px 8px rgba(75, 54, 33, 0.5);
            }

            label {
              font-size: 18px;
              font-weight: bold;
              margin-bottom: 8px;
              display: block;
            }

            form {
              display: flex;
              flex-direction: column;
              gap: 15px;
            }

            .logo {
              cursor: pointer;
              width: 120px;
              padding-top: 12px;
              padding-bottom: 12px;
              margin-left: 20px;
            }

            .version {
              font-size: 12px;
              text-align: center;
              margin-top: 20px;
              color: gray;
            }
            .estimate-container {
              border: 2px solid #ddd;
              border-radius: 15px;
              padding: 20px;
              margin: 20px;
              background: white;
            }

            .estimate-table {
                width: 100%;
                border-collapse: collapse;
                margin-bottom: 15px;
            }

            .estimate-table td, .estimate-table th {
                border: 1px solid black;
                padding: 8px;
            }
        ```

    src/main.tsx
        ```typescript
        import { StrictMode } from 'react';
        import { createRoot } from 'react-dom/client';
        import App from './App.tsx';
        import './index.css';

        createRoot(document.getElementById('root')!).render(
          <StrictMode>
            <App />
          </StrictMode>
        );
        ```

    src/vite-env.d.ts
        ```typescript
        /// <reference types="vite/client" />
        ```

    src/pages/CategorySelectionPage.tsx
        ```typescript
        import React, { useState } from 'react';
        import { useLocation, useNavigate } from 'react-router-dom';
        import { ArrowLeft, Home, Diamond, Crown } from 'lucide-react';
        import Layout from '../components/Layout';

        interface LocationState {
          projectType: string;
          clientName: string;
          projectName: string;
        }

        function CategorySelectionPage() {
          const location = useLocation();
          const navigate = useNavigate();
          const { projectType, clientName, projectName } = location.state as LocationState;
          const [selectedCategory, setSelectedCategory] = useState<string>('');

          const categories = [
            {
              id: 'standard',
              name: 'Standard',
              icon: Home,
              description: 'Quality essentials with budget-friendly finishes',
              features: ['Basic finishes', 'Standard materials', 'Essential amenities']
            },
            {
              id: 'premium',
              name: 'Premium',
              icon: Diamond,
              description: 'Enhanced quality with modern style',
              features: ['Premium finishes', 'Quality materials', 'Modern amenities']
            },
            {
              id: 'luxury',
              name: 'Luxury',
              icon: Crown,
              description: 'Exclusive finishes with premium materials',
              features: ['Luxury finishes', 'Premium materials', 'High-end amenities']
            }
          ];

          const handleNext = () => {
            if (selectedCategory) {
              navigate('/project-details', {
                state: {
                  projectType,
                  category: selectedCategory,
                  clientName,
                  projectName
                }
              });
            }
          };

          return (
            <Layout>
              {/* Header */}
              <header className="p-6 flex justify-between items-center">
                <div className="flex items-center space-x-4">
                  <button 
                    onClick={() => navigate(-1)}
                    className="text-gray-600 hover:text-[#9c8b75] transition-colors flex items-center space-x-2"
                  >
                    <ArrowLeft className="w-5 h-5" />
                    <span>Back</span>
                  </button>
                  <img 
                    src="/choicedge-logo.png" 
                    alt="Choicedge Logo" 
                    className="h-12 w-auto"
                  />
                </div>
                <button className="text-gray-600 hover:text-[#9c8b75] transition-colors">
                  History
                </button>
              </header>

              {/* Main Content */}
              <main className="max-w-4xl mx-auto px-4 py-12">
                <div className="text-center mb-12">
                  <h1 className="text-3xl md:text-4xl font-bold text-gray-800 mb-2">
                    Choose Your Style and Finish
                  </h1>
                  <p className="text-gray-600">
                    Select a category to determine the level of materials and finishes
                  </p>
                </div>

                <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-12">
                  {categories.map((category) => {
                    const Icon = category.icon;
                    return (
                      <button
                        key={category.id}
                        onClick={() => setSelectedCategory(category.id)}
                        className={`
                          relative p-6 rounded-xl transition-all duration-300 text-left
                          ${
                            selectedCategory === category.id
                              ? 'bg-[#d2b48c] text-white shadow-lg scale-105'
                              : 'bg-white hover:bg-[#d2b48c]/10 text-gray-700 hover:scale-102 shadow-md'
                          }
                        `}
                      >
                        <div className="flex flex-col items-center mb-4">
                          <Icon className={`w-12 h-12 ${selectedCategory === category.id ? 'text-white' : 'text-[#9c8b75]'}`} />
                          <h3 className="text-xl font-semibold mt-2">{category.name}</h3>
                        </div>
                        <p className="text-sm mb-4 text-center">
                          {category.description}
                        </p>
                        <ul className="space-y-2">
                          {category.features.map((feature, index) => (
                            <li key={index} className="text-sm flex items-center">
                              <span className="w-1.5 h-1.5 rounded-full bg-current mr-2" />
                              {feature}
                            </li>
                          ))}
                        </ul>
                      </button>
                    );
                  })}
                </div>

                <div className="text-center">
                  <button
                    onClick={handleNext}
                    disabled={!selectedCategory}
                    className={`
                      px-8 py-3 rounded-full text-white font-medium transition-all duration-300
                      ${
                        selectedCategory
                          ? 'bg-blue-600 hover:bg-blue-700 shadow-lg hover:scale-105'
                          : 'bg-gray-300 cursor-not-allowed'
                      }
                    `}
                  >
                    Next
                  </button>
                </div>
              </main>
            </Layout>
          );
        }

        export default CategorySelectionPage;
        ```

    src/pages/ComingSoonPage.tsx
        ```typescript
        import React from 'react';
        import { useNavigate } from 'react-router-dom';
        import { ArrowLeft } from 'lucide-react';
        import Layout from '../components/Layout';

        function ComingSoonPage() {
          const navigate = useNavigate();

          return (
            <Layout>
              {/* Header */}
              <header className="p-6 flex justify-between items-center">
                <div className="flex items-center space-x-4">
                  <button 
                    onClick={() => navigate(-1)}
                    className="text-gray-600 hover:text-[#9c8b75] transition-colors flex items-center space-x-2"
                  >
                    <ArrowLeft className="w-5 h-5" />
                    <span>Back</span>
                  </button>
                  <img 
                    src="/choicedge-logo.png" 
                    alt="Choicedge Logo" 
                    className="h-12 w-auto"
                  />
                </div>
              </header>

              {/* Main Content */}
              <main className="flex-grow flex flex-col items-center justify-center px-4 text-center">
                <h1 className="text-5xl font-bold text-gray-800 mb-4">
                  Coming Soon
                </h1>
                <p className="text-xl text-gray-600 mb-8 italic">
                  Manas is busy writing content & copy lines for Posts/Reels
                </p>
                <div className="w-24 h-24 border-4 border-[#d2b48c] border-t-transparent rounded-full animate-spin mb-8"></div>
                <button
                  onClick={() => navigate('/')}
                  className="px-8 py-3 bg-[#d2b48c] text-white rounded-full font-medium hover:bg-[#9c8b75] transition-colors duration-300 animate-pulse"
                >
                  Back to Project Selection
                </button>
              </main>
            </Layout>
          );
        }

        export default ComingSoonPage;
        ```

    src/pages/EstimateSummaryPage.tsx
        ```typescript
        import React from 'react';
        import { useLocation, useNavigate } from 'react-router-dom';
        import { ArrowLeft, Printer, Download, Mail, Phone } from 'lucide-react';
        import jsPDF from 'jspdf';
        import autoTable from 'jspdf-autotable';
        import Layout from '../components/Layout';

        interface Room {
          id?: string;
          name: string;
          area: number;
          rate: number;
          amount: number;
          carpetArea?: string;
        }

        interface Floor {
          id: string;
          name: string;
          carpetArea: string;
          rooms: Room[];
        }

        interface LocationState {
          layoutType?: string;
          isCustom: boolean;
          isVilla: boolean;
          category: string;
          areaOption?: 'total' | 'rooms';
          totalCarpetArea?: string;
          rooms?: Array<{ id: string; name: string; carpetArea: string }>;
          floors?: Floor[];
          clientName: string;
          projectName: string;
        }

        interface RoomItem {
          description: string;
          quantity: number;
          unit: string;
          amount: number;
        }

        interface DetailedRoom extends Room {
          items: RoomItem[];
        }

        interface DesignCharges {
          description: string;
          amount: number;
        }

        interface DetailedEstimate {
          rooms: DetailedRoom[];
          totalArea: number;
          designCharges: DesignCharges[];
          subtotal: number;
          gst: number;
          grandTotal: number;
          category: string;
          date: string;
          clientName: string;
          projectName: string;
        }

        const PRICE_RANGES = {
          standard: 1950,
          premium: 2750,
          luxury: 3850
        } as const;

        const ROOM_ITEMS: Record<string, RoomItem[]> = {
          'Living Room': [
            { description: 'TV Unit with Storage', quantity: 1, unit: 'Unit', amount: 0.30 },
            { description: 'False Ceiling with LED Lights', quantity: 1, unit: 'Lot', amount: 0.35 },
            { description: 'Wall Paneling', quantity: 1, unit: 'Sq.ft', amount: 0.20 },
            { description: 'Coffee Table', quantity: 1, unit: 'Unit', amount: 0.075 },
            { description: 'Shoe Cabinet', quantity: 1, unit: 'Unit', amount: 0.075 }
          ],
          'Bedroom': [
            { description: 'Wardrobe with Sliding Doors', quantity: 1, unit: 'Unit', amount: 0.40 },
            { description: 'Bed with Storage', quantity: 1, unit: 'Unit', amount: 0.30 },
            { description: 'Side Tables', quantity: 2, unit: 'Units', amount: 0.10 },
            { description: 'Study Table (Optional)', quantity: 1, unit: 'Unit', amount: 0.10 },
            { description: 'False Ceiling', quantity: 1, unit: 'Lot', amount: 0.10 }
          ],
          'Kitchen': [
            { description: 'Modular Kitchen Cabinets', quantity: 1, unit: 'Lot', amount: 0.32 },
            { description: 'Granite Counter Top', quantity: 1, unit: 'Sq.ft', amount: 0.28 },
            { description: 'Tall Unit Storage', quantity: 1, unit: 'Unit', amount: 0.18 },
            { description: 'Sink with Fittings', quantity: 1, unit: 'Set', amount: 0.12 },
            { description: 'Backsplash Tiles', quantity: 1, unit: 'Sq.ft', amount: 0.10 }
          ],
          'Bathroom': [
            { description: 'Vanity Unit', quantity: 1, unit: 'Unit', amount: 0.42 },
            { description: 'Shower Partition', quantity: 1, unit: 'Unit', amount: 0.35 },
            { description: 'Wall Tiles & Flooring', quantity: 1, unit: 'Sq.ft', amount: 0.23 }
          ]
        };

        const calculateDesignCharges = (totalAmount: number) => {
          const designChargePercentage = 0.08; // 8%
          const totalDesignCharges = totalAmount * designChargePercentage;
          
          return [
            { 
              description: 'Design Fee',
              amount: Math.round(totalDesignCharges * 0.65) // 65% of design charges
            },
            { 
              description: 'Site Visits & Supervision',
              amount: Math.round(totalDesignCharges * 0.15) // 15% of design charges
            },
            { 
              description: 'Project Management',
              amount: Math.